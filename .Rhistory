Grades[Grades[,] == "-"] <- 0
str(Grades)
Grades <- cbind(Grades[,1], lapply(Grades[,-1],as.numeric))
str(Grades)
View(Grades)
Grades <- cbind(Students, English.S1, English.S2, Maths.S1, Maths.S2)
str(Grades)
Grades <- as.data.frame(Grades)
Grades[Grades[,] == "-"] <- 0
str(Grades)
Grades[,-1] <- sapply(Grades[,-1], as.numeric)
str(Grades)
str(Grades)
Grades <- cbind(Students, English.S1, English.S2, Maths.S1, Maths.S2)
str(Grades)
Grades <- as.data.frame(Grades)
Grades[Grades[,] == "-"] <- 0
str(Grades)
Grades[,-1] <- sapply(Grades[,-1], as.numeric)
str(Grades)
library(reshape2)
install.packages("stringer")
library(stringr)
tidyDf <- melt(Grades, id.vars = "Students", measure.vars =
c("English.S1","English.S2","Math.S1","Math.S2"))
tidyDf <- melt(Grades, id.vars = "Students", measure.vars =
c("English.S1","English.S2","Maths.S1","Maths.S2"))
View(tidyDf)
colnames(tidyDf ) <- c("Students" ,"UnitName", "Grade")
colnames(tidyDf ) <- c("Students" ,"Unit.Name", "Grade")
tidyDf$Semester <- str_sub(tidyDf$UnitName, -2)
tidyDf <- melt(Grades, id.vars = "Students", measure.vars =
c("English.S1","English.S2","Maths.S1","Maths.S2"))
colnames(tidyDf ) <- c("Students" ,"Unit.Name", "Grade")
tidyDf$Semester <- str_sub(tidyDf$Unit.Name, -2)
tidyDf <- melt(Grades, id.vars = "Students", measure.vars =
c("English.S1","English.S2","Maths.S1","Maths.S2"))
colnames(tidyDf ) <- c("Students" ,"Unit.Name", "Grade")
tidyDf$Semester <- str_sub(tidyDf$Unit.Name, -1)
tidyDf <- melt(Grades, id.vars = "Students", measure.vars =
c("English.S1","English.S2","Maths.S1","Maths.S2"))
colnames(tidyDf ) <- c("Students" ,"Unit.Name", "Grade")
tidyDf$Semester <- str_sub(tidyDf$Unit.Name, -2)
tidyDf$Unit.Name <- str_sub(tidyDf$Unit.Name, 1,-4)
tidyDf
str(tidyDf)
#Sort dataframe
tidyDf[order(tidyDf$Students),]
tidyDf[order(tidyDf$Grade,decreasing = TRUE),]
tidyDf[order(tidyDf$Students,-tidyDf$Grade),]
#Sort dataframe
tidyDf <- tidyDf[order(tidyDf$Students,-tidyDf$Grade),]
rownames(tidyDf) <- c(1:28)
########## Q5
install.packages("readr")
install.packages("plyr")
install.packages("plyr")
library(readr)
library(plyr)
DH <- read.csv("/Users/aabu0011/Desktop/Monash/TA/FIT3152/Week3/Dunnhumby1-20.csv", header=TRUE)
View(DH)
DH[,2] <- as.Date(DH[,2], format = "%d-%m-%y")
DH <- read.csv("/Users/aabu0011/Desktop/Monash/TA/FIT3152/Week3/Dunnhumby1-20.csv", header=TRUE)
DH[,2] <- as.Date(DH[,2], format = "%d-%m-%y")
DH <- DH[DH[,2] >= "01-09-10",]
DH <- read.csv("/Users/aabu0011/Desktop/Monash/TA/FIT3152/Week3/Dunnhumby1-20.csv", header=TRUE)
DH[,2] <- as.Date(DH[,2], format = "%d-%m-%y")
DH <- DH[DH[,2] >= "01-09-10",]
DH <- DH[DH[,2] >= as.Date("01-09-10", "%d-%m-%y"),]
DH <- DH[DH[,2] <= as.Date("31-03-11", "%d-%m-%y"),]
DH <- read.csv("/Users/aabu0011/Desktop/Monash/TA/FIT3152/Week3/Dunnhumby1-20.csv", header=TRUE)
DH[,2] <- as.Date(DH[,2], format = "%d-%m-%y")
DH <- DH[DH[,2] >= as.Date("01-09-10", "%d-%m-%y"),]
DH <- DH[DH[,2] <= as.Date("31-03-11", "%d-%m-%y"),]
str(DH)
lm(df[,4]~df[,3]
lm(DH[,4]~DH[,3]
lm(DH[,4]~DH[,3]
lm(DH[,4]~DH[,3])
DH <- read.csv("/Users/aabu0011/Desktop/Monash/TA/FIT3152/Week3/Dunnhumby1-20.csv", header=TRUE)
DH[,2] <- as.Date(DH[,2], format = "%d-%m-%y")
DH <- DH[DH[,2] >= as.Date("01-09-10", "%d-%m-%y"),]
DH <- DH[DH[,2] <= as.Date("31-03-11", "%d-%m-%y"),]
lm(DH[,4]~DH[,3])
summary(model)
model <- lm(DH[,4]~DH[,3])
summary(model)
View(model)
model$Adjusted R-squared
model$AdjustedR-squared
summary(model)$r.squared
summary(model)
DH <- read.csv("/Users/aabu0011/Desktop/Monash/TA/FIT3152/Week3/Dunnhumby1-20.csv", header=TRUE)
DH[,2] <- as.Date(DH[,2], format = "%d-%m-%y")
DH <- DH[DH[,2] >= as.Date("01-09-10", "%d-%m-%y"),]
DH <- DH[DH[,2] <= as.Date("31-03-11", "%d-%m-%y"),]
str(DH)
Models <- by(DH, DH[1], function(df) summary(lm(df[,4]~df[,3]))$r.squared)
Models
Models <- as.data.frame(as.table(Models))
View(Models)
colnames (Modesl) [2] <- "r.squared"
colnames (Models) [2] <- "r.squared"
Models <- Models[order(-Models$r.squared),]
rownames (Models) <- c(1:20)
highest10 <- Models[1:10,]
View(highest10)
lowest10 <- Models[11:20,]
View(lowest10)
View(DH)
View(highest10)
high <- DH[DH[,1] == highest10[,1],]
View(high)
low <- DH[DH[,1] == lowest10[,1],]
View(low)
Models <- by(DH, DH[1], function(df) summary(lm(df[,4]~df[,3]))$r.squared)
Models <- as.data.frame(as.table(Models))
colnames (Models) [2] <- "r.squared"
Models <- Models[order(-Models$r.squared),]
highest10 <- Models[1:10,]
lowest10 <- Models[11:20,]
high <- DH[DH[,1] == highest10[,1],]
low <- DH[DH[,1] == lowest10[,1],]
high_avg <- aggregate(high[4], high[1], mean)
View(high_avg)
low_avg <- aggregate(low[4], low[1], mean)
View(lowest10)
View(low_avg)
t.test(high_avg, low_avg, "g", conf.level = 0.99)
View(low_avg)
View(high_avg)
t.test(high_avg[,2], low_avg[,2], "g", conf.level = 0.99)
print(t.test(high_avg[,2], low_avg[,2], "g", conf.level = 0.99))
t.test(high_avg[,2], low_avg[,2], "g", conf.level = 0.99)
Students <- c("Anna", "Bobby", "Carl", "Duy", "Enid", "Fey", "Geoff")
English.S1 <- c(50, "-", 5, 37, 82, 73, 95)
English.S2 <- c("-", 52, 30, 80, "-", 36, 72)
Maths.S1 <- c(77, "-", "-", 18, 96, 63, 13)
Maths.S2 <- c(69, 47, 55, 10, 58, "-", 90)
Grades <- cbind(Students, English.S1, English.S2, Maths.S1, Maths.S2)
str(Grades)
Grades <- as.data.frame(Grades)
Grades[Grades[,] == "-"] <- 0
str(Grades)
Grades[,-1] <- sapply(Grades[,-1], as.numeric)
str(Grades)
tidyDf <- melt(Grades, id.vars = "Students", measure.vars =
c("English.S1","English.S2","Maths.S1","Maths.S2"))
DH <- read.csv("/Users/aabu0011/Desktop/Monash/TA/FIT3152/Week3/Dunnhumby1-20.csv", header=TRUE)
DH[,2] <- as.Date(DH[,2], format = "%d-%m-%y")
DH <- DH[DH[,2] >= as.Date("01-09-10", "%d-%m-%y"),]
DH <- DH[DH[,2] <= as.Date("31-03-11", "%d-%m-%y"),]
str(DH)
Models <- by(DH, DH[1], function(df) summary(lm(df[,4]~df[,3]))$r.squared)
Models <- as.data.frame(as.table(Models))
colnames (Models) [2] <- "r.squared"
Models <- Models[order(-Models$r.squared),]
highest10 <- Models[1:10,]
lowest10 <- Models[11:20,]
high <- DH[DH[,1] == highest10[,1],]
low <- DH[DH[,1] == lowest10[,1],]
high_avg <- aggregate(high[4], high[1], mean)
low_avg <- aggregate(low[4], low[1], mean)
t.test(high_avg[,2], low_avg[,2], "g", conf.level = 0.99)
install.packages("tree")
library(tree)
########## Q3
data(mtcars)
attach(mtcars)
summary(mpg)
cons = ifelse(mpg >= 19.20, "yes", "no")
carsclass = cbind(cons, mtcars)
head(carsclass)
set.seed(9999)
rows <- sample(1:nrow(carsclass),0.7*nrow(carsclass))
training_set <- carsclass[rows,]
test_set <- carsclass[-rows,]
View(test_set)
View(training_set)
##### c
set.seed(9999)
training_set2 <- training_set[sample(nrow(training_set), 100, replace = TRUE),]
View(training_set2)
View(carsclass)
model <- tree(cons~. - cons, data = carsclass)
plot(model)
model <- tree(cons~. - mpg, data = carsclass)
plot(model)
##### c
set.seed(9999)
training_set2 <- training_set[sample(nrow(training_set), 100, replace = TRUE),]
model <- tree(cons~. - mpg, data = training_set2)
plot(model)
summary(model)
library(tree)
########## Q3
##### a
data(mtcars)
attach(mtcars)
summary(mpg)
cons = ifelse(mpg >= 19.20, "yes", "no")
carsclass = cbind(cons, mtcars)
head(carsclass)
##### b
set.seed(9999)
rows <- sample(1:nrow(carsclass),0.7*nrow(carsclass))
training_set <- carsclass[rows,]
test_set <- carsclass[-rows,]
##### c
set.seed(9999)
training_set2 <- training_set[sample(nrow(training_set), 100, replace = TRUE),]
model <- tree(cons~. - mpg, data = training_set2)
summary(model)
str(training_set2)
model <- tree(cons~.-mpg, data = training_set2)
summary(model)
str(training_set2)
########## Q3
##### a
data(mtcars)
attach(mtcars)
summary(mpg)
cons = ifelse(mpg >= 19.20, 1, 0)
carsclass = cbind(cons, mtcars)
head(carsclass)
##### b
set.seed(9999)
rows <- sample(1:nrow(carsclass),0.7*nrow(carsclass))
training_set <- carsclass[rows,]
test_set <- carsclass[-rows,]
##### c
set.seed(9999)
training_set2 <- training_set[sample(nrow(training_set), 100, replace = TRUE),]
model <- tree(cons~.-mpg, data = training_set2)
summary(model)
str(training_set2)
plot(model)
text(model, pretty = 0)
plot(model)
text(model)
##### e
predict_test <- predict(model, test_set, type = "class")
##### e
predict_test <- predict(model, test_set)
predict_test
table(actual = test_set$cons, predicted = predict_test)
cons = ifelse(mpg >= 19.20, "yes", "no", stringsAsFactors = T)
cons = ifelse(mpg >= 19.20, "yes", "no", StringsAsFactors = T)
cons = ifelse(mpg >= 19.20, "yes", "no")
carsclass = cbind(cons, mtcars, StringsAsFactors = T)
head(carsclass)
str(carsclass)
########## Q3
##### a
data(mtcars)
attach(mtcars)
summary(mpg)
cons = ifelse(mpg >= 19.20, "yes", "no")
carsclass = cbind(cons, mtcars)
head(carsclass)
str(carsclass)
carsclass$cons <- as.factor(carsclass$cons)
str(carsclass)
##### b
set.seed(9999)
rows <- sample(1:nrow(carsclass),0.7*nrow(carsclass))
training_set <- carsclass[rows,]
test_set <- carsclass[-rows,]
##### c
set.seed(9999)
training_set2 <- training_set[sample(nrow(training_set), 100, replace = TRUE),]
str(training_set2)
model <- tree(cons~.-mpg, data = training_set2)
##### d
summary(model)
plot(model)
text(model)
##### e
predict_test <- predict(model, test_set)
table(actual = test_set$cons, predicted = predict_test)
##### e
predict_test <- predict(model, test_set, type = "class")
table(actual = test_set$cons, predicted = predict_test)
table(actual1 = test_set$cons, predicted = predict_test)
########## Q2
install.packages("e1071")
library(e1071)
Colour <- c("red","blue","green","green","blue","blue","red","red","blue","green")
Size <- c("medium","big","medium","small","big","small","small","mdeium","medium","small")
Teeth <- c("yes","no","no","yes","yes","yes","no","no","yes","no")
Friendly <- c("no","yes","no","no","yes","yes","yes","yes","yes","no")
Aliens <- cbind(Colour,Size,Teeth,Friendly)
Aliens <- as.data.frame(Aliens)
View(Aliens)
str(Aliens)
Aliens <- lapply(Aliens, as.factor)
str(Aliens)
Aliens <- as.data.frame(Aliens)
model <- naiveBayes(Friendly~., data = Aliens)
Colour1 <- c("red","green","blue")
Size1 <- c("big","big","small")
Teeth1 <- c("yes","yes","no")
Colour <- c("red","green","blue")
Size <- c("big","big","small")
Teeth <- c("yes","yes","no")
Aliens_test <- cbind(Colour,Size,Teeth)
Aliens_test <- as.data.frame(Aliens_test)
Aliens_test <- lapply(Aliens_test, as.factor)
Aliens_test <- as.data.frame(Aliens_test)
predicted <- predict(model,Aliens_test)
predicted
Colour <- c("red","blue","green","green","blue","blue","red","red","blue","green")
Size <- c("medium","big","medium","small","big","small","small","mdeium","medium","small")
Teeth <- c("yes","no","no","yes","yes","yes","no","no","yes","no")
Friendly <- c("no","yes","no","no","yes","yes","yes","yes","yes","no")
Aliens <- cbind(Colour,Size,Teeth,Friendly)
Aliens <- as.data.frame(Aliens)
str(Aliens)
Aliens <- lapply(Aliens, as.factor)
Aliens <- as.data.frame(Aliens)
Colour <- c("red","green","blue")
Size <- c("big","big","small")
Teeth <- c("yes","yes","no")
Aliens_test <- cbind(Colour,Size,Teeth)
Aliens_test <- as.data.frame(Aliens_test)
Aliens_test <- lapply(Aliens_test, as.factor)
Aliens_test <- as.data.frame(Aliens_test)
model <- naiveBayes(Friendly~., data = Aliens)
predicted <- predict(model,Aliens_test)
predicted
predictedr <- predict(model, Aliens_test, type = "raw")
predictedr
View(Aliens)
View(Aliens)
str(Aliens)
Colour <- c("red","blue","green","green","blue","blue","red","red","blue","green")
Size <- c("medium","big","medium","small","big","small","small","medium","medium","small")
Teeth <- c("yes","no","no","yes","yes","yes","no","no","yes","no")
Friendly <- c("no","yes","no","no","yes","yes","yes","yes","yes","no")
Aliens <- cbind(Colour,Size,Teeth,Friendly)
Aliens <- as.data.frame(Aliens)
str(Aliens)
Aliens <- lapply(Aliens, as.factor)
Aliens <- as.data.frame(Aliens)
Colour <- c("red","green","blue")
Size <- c("big","big","small")
Teeth <- c("yes","yes","no")
Aliens_test <- cbind(Colour,Size,Teeth)
Aliens_test <- as.data.frame(Aliens_test)
Aliens_test <- lapply(Aliens_test, as.factor)
Aliens_test <- as.data.frame(Aliens_test)
model <- naiveBayes(Friendly~., data = Aliens)
predicted <- predict(model, Aliens_test)
predicted
predictedr <- predict(model, Aliens_test, type = "raw")
predictedr
# create database
routes <- read.table("routes.txt", sep = ",", header = TRUE)
routes <- routes[c(1:3,5)]
load("~/Desktop/Monash/Research/GTFS Datasets/VBB Berlin/R/with Busses/.RData")
View(new_stops)
View(friday_stops)
load("~/Desktop/Monash/Research/GTFS Datasets/VBB Berlin/R/with Busses/.RData")
View(friday_stops)
View(new_stops)
View(friday_routes)
load("~/Desktop/Monash/Research/GTFS Datasets/VBB Berlin/R/with Busses/.RData")
View(new_stops)
View(stops_clusters)
load("~/Desktop/Monash/Research/GTFS Datasets/VBB Berlin/R/with Busses/.RData")
View(new_stops_clusters)
View(new_stops)
View(friday_stops)
View(friday_services)
View(friday_routes)
load("~/Desktop/Monash/Research/GTFS Datasets/VBB Berlin/R/with Busses/.RData")
View(new_transfers2)
load("~/Desktop/Monash/Research/GTFS Datasets/VBB Berlin/R/with Busses/.RData")
View(dm)
View(stops_clusters)
View(centroids)
#################################################################################################################
#################################################################################################################
#################################################################################################################
#################################################################################################################
# calculate new transfer times based on stations not clusters!
centroids$stationID <- 0:length(centroids[,1]-1)
#################################################################################################################
#################################################################################################################
#################################################################################################################
#################################################################################################################
# calculate new transfer times based on stations not clusters!
centroids$stationID <- 0:(length(centroids[,1]) -1)
View(stops_clusters)
View(distance_matrix)
View(tempo_stops)
View(distance_matrices)
View(dm)
View(distance_matrix2)
load("~/Desktop/Monash/Research/GTFS Datasets/VBB Berlin/R/with Busses/.RData")
length(dm)
str(dm)
length(dm > 0)
length(dm > 1)
length(dm > 1000)
length(dm > 1010101)
View(dm)
length(dm < 0)
length(dm[,] < 0)
length(dm[,] == 0)
dm <- as.numeric(dm)
dm <- as.matrix(as.numeric(dm))
View(dm)
length(dm[,1] == 0)
sum(dm[,1] == 0)
library(geosphere)
dm <- distm (x = centroids[,c(2,3)], fun = distGeo)
View(dm)
str(dm)
sum(dm[,1] == 0)
sum(dm == 0)
sum(dm < 0)
sum(dm > 0)
sum(dm >= 0)
sum(dm <= 1000)
sum(dm <= 2000)
unreach <- read.table("/Users/aabu0011/Desktop/Monash/Research/CPD_PT/CLion/VBBFtVttBL/unreachable.txt")
unreach <- read.table("/Users/aabu0011/Desktop/Monash/Research/CPD_PT/CLion/VBBFtVttBL/unreachable.txt", col.names = paste("V",1:100), fill = T, sep = " ")
View(unreach)
unreach <- read.table("/Users/aabu0011/Desktop/Monash/Research/CPD_PT/CLion/VBBFtVttBL/unreachable.txt", col.names = paste("V",1:100), fill = T, sep = "")
View(unreach)
unreach <- t(unreach)
transfers <- read.csv("/Users/aabu0011/Downloads/transfers.csv")
View(transfers)
stoptimes <- read.csv("/Users/aabu0011/Downloads/stop_times.csv")
View(stoptimes)
stops <- read.csv("/Users/aabu0011/Downloads/stops.csv")
View(stops)
stops2 <- read.csv("/Users/aabu0011/Downloads/gtfs 2/stops.txt")
View(stops2)
View(stops)
stoptimes2 <- read.csv("/Users/aabu0011/Downloads/gtfs 2/stop_times.txt")
View(stoptimes2)
stoplabels <- read.csv("/Users/aabu0011/Downloads/labels/stop_label.csv")
View(stoplabels)
length(unique(stops2$stop_id))
length(unique(stoplabels$old_id))
length(unique(stoplabels$new_id))
length(unique(stops2$stop_name))
stops2$location <- stops2$stop_lat * stops2$stop_lon
length(unique(stops2$location))
table(stops2$stop_name)
order(table(stops2$stop_name))
sort(table(stops2$stop_name))
sort(table(stops2$stop_name), decreasing = TRUE)
Pstops <- read.csv("/Users/aabu0011/Downloads/transfers-2.csv")
View(Pstops)
Ptransfers <- read.csv("/Users/aabu0011/Downloads/transfers-2.csv")
View(Ptransfers)
length(unique(Ptransfers$from_stop_id))
362291/23519
View(Ptransfers)
rm(stops)
rm(stops2)
rm(Pstops)
rm(stoplabels)
rm(stoptimes)
rm(stoptimes2)
rm(transfers)
Pstops <- read.csv("/Users/aabu0011/Downloads/gtfs 3/stops.txt")
View(Pstops)
table(Pstops$location_type)
sort(table(Pstops2$stop_name), decreasing = TRUE)
sort(table(Pstops$stop_name), decreasing = TRUE)
Plabels <- read.csv("/Users/aabu0011/Downloads/labels 2/stop_label.csv")
View(Plabels)
Pstops$location <- Pstops$stop_lat * Pstops$stop_lon
version
options(repos="https://CRAN.R-project.org")
install.packages("directlabels")
install.packages("wordcloud")
install.packages("wordcloud")
install.packages("basicPlotteR")
install.packages("basicPlotteR")
install.packages("basicPlotteR")
library(basicPlotteR)
install.packages("basicPlotteR")
EA <- read.csv("/Users/aabu0011/Desktop/Monash/Research/CPD_PT/CLion/TCDcontingent0/EA.txt")
EA_CSA <- read.csv("/Users/aabu0011/Desktop/Monash/Research/CPD_PT/CLion/TCDcontingent0/EA_CSA.txt")
diff <- EA - EA_CSA
View(diff)
EA = EA + 1
View(EA)
diff <- EA - EA_CSA
EA <- read.csv("/Users/aabu0011/Desktop/Monash/Research/CPD_PT/CLion/TCDcontingent0/EA.txt")
EA_CSA <- read.csv("/Users/aabu0011/Desktop/Monash/Research/CPD_PT/CLion/TCDcontingent0/EA_CSA.txt")
diff <- EA - EA_CSA
summary(diff)
Connections <- read.table("/Users/aabu0011/Desktop/Monash/Research/CPD_PT/CLion/TCDGitHub/Datasets/Berlin/connections.txt")
View(Connections)
Connections <- read.table("/Users/aabu0011/Desktop/Monash/Research/CPD_PT/CLion/TCDGitHub/Datasets/Berlin/connections.txt",
header = TRUE)
View(Connections)
StopEvents <- read.table("/Users/aabu0011/Desktop/Monash/Research/CPD_PT/CLion/TCDGitHub/Datasets/Berlin/connections.txt",
header = TRUE)
View(StopEvents)
StopEvents <- StopEvents[, 1:4]
getwd()
setwd("/Users/aabu0011/Desktop/Monash/Research/CPD_PT/CLion/TCDGitHub")
getwd()
write.table(StopEvents, "StopEvents.txt")
write.table(StopEvents, "StopEvents.txt", row.names = FALSE)
